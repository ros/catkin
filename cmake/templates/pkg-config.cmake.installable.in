# Remove duplicate libraries, generalized from PCLConfig.cmake.in
macro(remove_duplicate_libraries _unfiltered_libraries _final_filtered_libraries)
  set(_filtered_libraries)
  set(_debug_libraries)
  set(_optimized_libraries)
  set(_other_libraries)
  set(_waiting_for_debug 0)
  set(_waiting_for_optimized 0)
  set(_library_position -1)
  foreach(library ${${_unfiltered_libraries}})
    if("${library}" STREQUAL "debug")
      set(_waiting_for_debug 1)
    elseif("${library}" STREQUAL "optimized")
      set(_waiting_for_optimized 1)
    elseif(_waiting_for_debug)
      list(FIND _debug_libraries "${library}" library_position)
      if(library_position EQUAL -1)
        list(APPEND ${_filtered_libraries} debug ${library})
        list(APPEND _debug_libraries ${library})
      endif()
      set(_waiting_for_debug 0)
    elseif(_waiting_for_optimized)
      list(FIND _optimized_libraries "${library}" library_position)
      if(library_position EQUAL -1)
        list(APPEND ${_filtered_libraries} optimized ${library})
        list(APPEND _optimized_libraries ${library})
      endif()
      set(_waiting_for_optimized 0)
    else("${library}" STREQUAL "debug")
      list(FIND _other_libraries "${library}" library_position)
      if(library_position EQUAL -1)
        list(APPEND ${_filtered_libraries} ${library})
        list(APPEND _other_libraries ${library})
      endif()
    endif("${library}" STREQUAL "debug")
  endforeach(library)
  set(_final_filtered_libraries _filtered_libraries)
endmacro(remove_duplicate_libraries)


if (@PACKAGE_NAME@_CONFIG_INCLUDED)
  return()
endif()
set(@PACKAGE_NAME@_CONFIG_INCLUDED TRUE)

if (NOT "X@PACKAGE_INCLUDE_DIRS@" STREQUAL "X")
  find_file(@PACKAGE_NAME@_INCLUDE_DIRS include PATHS @PKG_INCLUDE_PREFIX@
            NO_DEFAULT_PATH)
endif()

foreach(lib @PACKAGE_LIBRARIES@)
  set(onelib "${lib}-NOTFOUND")
  find_library(onelib ${lib}
    PATHS @PKG_LIB_PREFIX@/lib
    NO_DEFAULT_PATH
    )
  if(NOT onelib)
    message(FATAL_ERROR "Library '${lib}' in package @PACKAGE_NAME@ is not installed properly")
  endif()
  list(APPEND @PACKAGE_NAME@_LIBRARIES ${onelib})
endforeach()

foreach(dep @PACKAGE_DEPENDS@)
  if(NOT ${dep}_FOUND)
    find_package(${dep})
  endif()
  list(APPEND @PACKAGE_NAME@_INCLUDE_DIRS ${${dep}_INCLUDE_DIRS})
  list(APPEND @PACKAGE_NAME@_LIBRARIES ${${dep}_LIBRARIES})
endforeach()

if (@PACKAGE_NAME@_INCLUDE_DIRS)
  list(REMOVE_DUPLICATES @PACKAGE_NAME@_INCLUDE_DIRS)
endif()
if(@PACKAGE_NAME@_LIBRARIES)
  remove_duplicate_libraries(@PACKAGE_NAME@_LIBRARIES @PACKAGE_NAME@_LIBRARIES)
endif()

foreach(extra @PACKAGE_CFG_EXTRAS@)
  set(_extra_inc _extra_inc-NOTFOUND)
  find_file(_extra_inc ${extra} PATHS @PKG_CMAKE_DIR@ NO_DEFAULT_PATH)
  include(${_extra_inc})
endforeach()

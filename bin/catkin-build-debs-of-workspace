#! /usr/bin/env bash -ex

ARGS=$(getopt -o "h" --long "help" \
  -n $0 -- "$@")
if [ $? != 0 ] ; then exit 1 ; fi
eval set -- "$ARGS"

while true ; do
	case "$1" in
    # -- is artefact from getopt
		--) shift ; break ;;
		-h|--help) echo "$0 iterates over all catkin projects and runs git buildpackage with suitable options, installs dependencies" ; exit 0 ;;
		*) echo "Internal error!" ; exit 1 ;;
	esac
done

if [ -n "$1" ] ; then echo "$0 takes no arguments"; exit 1 ; fi


echo "!!!!!!!!!!!!!!! DO NOT PROCEED UNLESS YOU KNOW WHAT YOU ARE DOING !!!!!!!!!"
echo "This script runs git clean (which removes untracked files forever) and runs sudo commands to install linux packages."
echo -n "Please confirm (y or n) :"
read CONFIRM
case $CONFIRM in
    y|Y|YES|yes|Yes) ;;
    *) echo Aborting - you entered $CONFIRM
        exit
        ;;
esac

TOP=$(dirname $0)
work=`pwd`
distro=$(lsb_release -cs)
order=$($TOP/catkin_topological_order --only-folders)

for x in $order
do
    (
	set -ex
	cd $work/$x
	git catkin-track-all
	git clean -dxf

	latest_release=$(git tag -l "debian/*$distro" | tail -1)
	git checkout $latest_release

	git buildpackage -S -uc -us --git-ignore-new

	git clean -dxf
	dsc=$(ls $work/*.dsc -tr | tail -1)

	cd $work
	dpkg-source -x $dsc
	deb_dir=$(ls $work -tr | tail -1)
	cd $deb_dir


	#attempt to apt-get install all unmet build dependencies
	#DOH TODO there has got to be a better way to do this:
	if ! dpkg-checkbuilddeps 2> unmet
	then
	    x=$(cat unmet)
	    remove=${x%:*} #we want to remove dpkg-checkbuilddeps: Unmet build dependencies
	    dependencies=${x#$remove:}
	    sudo apt-get install -y $dependencies
	fi
	rm unmet
  
	version=$(dpkg-parsechangelog -n1 | grep Version\: | awk '{print $2}')
	new_version=$version~$(date +%Y%m%d-%H%M%z)
	debchange -v $new_version 'Time stamping'
	cat debian/changelog

	dpkg-buildpackage -rfakeroot -uc -b
	sudo dpkg -i $(ls -tr $work/*.deb | tail -1)
    )
done

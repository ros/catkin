#!/usr/bin/env python

from __future__ import print_function
import argparse
import os
import sys

try:
    from catkin.builder import build_workspace_isolated
except ImportError:
    # find the import relatively to make it work before installing catkin
    sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'python'))
    from catkin.builder import build_workspace_isolated


def main():
    parser = argparse.ArgumentParser(
        description='Builds each catkin (and non-catkin) package from '
                    'a given workspace in isolation, but still in '
                    'topological order.'
    )
    add = parser.add_argument
    add('-C', '--directory', dest='workspace',
        help='The base path of the workspace (default ".")'
    )
    add('--source', '--source-space', default=None,
        help='The path to the source space (default "src")'
    )
    add('--build', '--build-space', default=None,
        help='The path to the build space (default "build")'
    )
    add('--devel', '--devel-space', default=None,
        help='Sets the target devel space (default "devel")'
    )
    add('--merge', action='store_true', default=False,
        help='Build each catkin package into a common devel space.'
    )
    add('--install-space', dest='install_space', default=None,
        help='Sets the target install space (default "install")'
    )
    add('--install', action='store_true', default=False,
        help='Causes each catkin package to be installed.'
    )
    add('-j', '--jobs', type=int, metavar='JOBS', nargs='?',
        help='Specifies the number of jobs (commands) to run simultaneously. '
             'Defaults to the number of CPU cores.'
    )
    add('--force-cmake', action='store_true', default=False,
        help='Runs cmake explicitly for each catkin package.'
    )
    add('--no-color', action='store_true', default=False,
        help='Disables colored ouput (only for catkin_make and CMake)'
    )
    add('-v', '--verbose', action='store_true', default=False,
        help='Prints more build output.'
    )
    args = parser.parse_args()

    build_workspace_isolated(
        workspace=args.workspace or '.',
        sourcespace=args.source,
        buildspace=args.build,
        develspace=args.devel,
        installspace=args.install_space,
        merge=args.merge,
        install=args.install,
        jobs=args.jobs,
        force_cmake=args.force_cmake,
        colorize=not args.no_color,
        quiet=not args.verbose
    )

if __name__ == '__main__':
    main()
